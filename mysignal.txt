/* 
 * mysignal.c written by Erik Davis
 * CS431 - Assignment 2 Part I, April 12, 2019
 * 
 * A simple program to perform a fork() system call and 
 * demonstrate message passing between a parent and child process
 * using a signal. 
 */
 
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <errno.h>
 
const int SLEEP_TIME = 3;  // The parent sleep time
int SIGNAL_INDICATOR = 0;  // Indicates when a signal is received via handler
 
void handler(int sig_num); 
 
int main() {
 	
	// Create a child process using fork. Change flow based on parent or child
	printf("\nCreating a child process...\n\n");
	int pID = fork();
 	
	switch (pID) {
		case -1 :
			// The fork was unsuccessful
			printf("ERR: Unable to create child process: %s\n", strerror(errno));
			exit(1);
			break;
		case 0 :
			// Child process, check for signal every 1 second
			while (SIGNAL_INDICATOR != 1) {
				sleep(1);
				if (signal(SIGUSR1, handler) == SIG_ERR) {
					printf("ERR: Unable to register signal handler: %s\n", 
						strerror(errno));
					exit(1);
				}
			}
			printf("Child: Received SIGUSR1 successfully!\n\n");
			break;
		default :
			// Parent process, sleep for some_time then send signal to child
			printf("Parent Process pID is %d\n", getpid());
			printf("Child Process pID is %d\n\n", pID);
			printf("Parent: Sleeping for %d seconds...\n\n", SLEEP_TIME);
			sleep(SLEEP_TIME);
			if (kill(pID, SIGUSR1) == -1) {
				printf("ERR: Unable to send signal to child: %s\n", 
					strerror(errno));
				exit(1);
			}
			printf("Parent: Sent SIGUSR1 signal to child process (pid: %d)\n", 
				pID);
	}
 	return 0;
 }
 
 // Handler for receiving a signal
 void handler(int sig_num) {
 	if (sig_num == SIGUSR1) {
 		SIGNAL_INDICATOR = 1; 
 	}
 }